import pandas as pd
import argparse
import mlflow
import mlflow.sklearn
import os

def load_and_predict(model_uri, input_csv, target_col=None):
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå input ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    if not os.path.exists(input_csv):
        raise FileNotFoundError(f"‚ùå Input CSV file not found: {input_csv}")

    # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏à‡∏≤‡∏Å mlflow
    model = mlflow.sklearn.load_model(model_uri)

    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• csv
    df = pd.read_csv(input_csv)

    # ‡∏•‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå target ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡πÅ‡∏•‡∏∞‡∏Å‡πç‡∏≤‡∏´‡∏ô‡∏î‡∏ä‡∏∑‡πà‡∏≠
    if target_col and target_col in df.columns:
        df = df.drop(target_col, axis=1)

    # ‡∏ó‡πç‡∏≤ prediction
    predictions = model.predict(df)

    print("üìÑ Input data preview:")
    print(df.head())
    print("\n‚úÖ Predictions:")
    print(predictions)

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("--model_uri", type=str, required=True,
                        help="MLflow model URI")
    # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏û‡∏≤‡∏ò‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏≤‡∏ò‡πÅ‡∏ö‡∏ö‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    parser.add_argument("--input_csv", type=str,
                        default="train_and_test2_preprocessed.csv", help="Input CSV file path")
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ default ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö target_col ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
    parser.add_argument("--target_col", type=str, default="2urvived",
                        help="Name of target column to drop from input if exists")
    args = parser.parse_args()

    load_and_predict(args.model_uri, args.input_csv, args.target_col)